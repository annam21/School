# Parameters to monitor in JAGS
cjs.params <- c("b0.phi", "b0.p","mean.phi", "mean.p")
# MCMC specifications
ni <- 5000
nt <- 1
nb <- 500
nc <- 1
# run constant model in JAGS
# logit(phi) = B0
phidot_pdot_res <- jags( cjs.data,
cjs.inits,
cjs.params,
"cjs_phidot_pdot.txt",
n.chains=nc,
n.iter=ni,
n.burnin=nb,
n.thin=nt
)
# Look at results
phidot_pdot_res
mcmcplot(phidot_pdot_res)
install.packages("purrr")
.libPaths()
libPaths()
.libPaths
getwd()
setwd("C:/Users/anna.moeller/Documents")
a <- c(1, 5, 235, pi)
a
b <- c("A", "B", "f", "gorilla")
b
c <- as.factor(seq(1:4))
d <- as.Date(c("2017-04-05", "2017-04-09", "2017-04-01", "2017-03-05"))
is.female <- c(T, F, T, T)
# Data.frame
dat <- data.frame(weight = a,
name = b,
finisher = c,
date = d,
is.female = is.female)
dat
a <- c(1, 5, 235, "pi")
a
as.numeric(a)
as.integer(a)
as.numeric(round(a, 2))
a
a <- c(1, 5, 235, pi)
a
d <- as.Date(c("2017-04-05", "2017-04-09", "2017-04-01", "2017-03-05"))
d
d + 30
a
a + 3
a + c(1, 2, 1, 2)
a + c(4, 4, 4) # Warning
a + c(4, 2) # Warning
c <- as.factor(seq(1:4))
c
as.factor(c("a", "b", "c"))
as.factor(c("ad", "bs", "ca"))
as.factor(letters[1:3])
as.factor(Letters[1:3])
as.factor(LETTERS[1:3])
sapply(dat, class)
dat <- data.frame(weight = a,
name = b,
finisher = c,
date = d,
is.female = is.female,
stringsAsFactors = F)
sapply(dat, class)
c+1
gg <- as.factor(letters[1:3])
gg
gg + a
gg + 1
as.numeric(gg)
gg <- as.factor(letters[3:1])
as.numeric(gg)
gg
load("GIS Layers/Mule Deer PMUs/Population Management Units")
readOGR("GIS Layers/Mule Deer PMUs", "Population Management Units")
rgdal::readOGR("GIS Layers/Mule Deer PMUs", "Population Management Units")
pmu <- rgdal::readOGR("GIS Layers/Mule Deer PMUs", "Population Management Units")
plot(pmu(
plot(pmu)
plot(pmu)
class(pmu)
slots(pmu)
slot(pmu)
atr(pmu)
attr(pmu)
?attr
names(pmu)
plot(pmu)
library(rgdal)
plot(pmu)
head(pmu)
head(pmu@data)
pmu$Shape_area[pmu$Group_1 == "Mountain Valley"]
# Packages
source("GitHub/packages.R")
# Load GMUs
gmus <- readOGR("GIS Layers/IDFG Game Management Units", "GameManagementUnits")
load("GIS Layers/Mule Deer PMUs/dictionaries.RData")
# Read in GMU/PMU lookup table
lookup <- read.csv("GIS Layers/Mule Deer PMUs/MD PMUs and units within.csv")
lu <- lookup %>%
mutate_all(funs(gsub("^$", NA, .))) %>%
select(-PMU.ID) %>%
gather("tbd", "GMU", -1) %>%
select(-tbd) %>%
rename(PMU = PMU.name) %>%
filter(!is.na(GMU)) %>%
rbind(c("YNP", "YNP")) %>%
mutate(PMU = gsub("^MD_", "", .$PMU),
GMU = as.factor(GMU) )
# Dissolve to PMUs and reattach dataframe info
gmus@data <- left_join(gmus@data, lu, by = c("NAME" = "GMU"))
# Dissolve
pmus <- aggregate(gmus, list(gmus$PMU), FUN = first, dissolve = T)
# gUnaryUnion and unionSpatialPolygons are other dissolve funtions, but they lose the
#   dataframe part of the object.
plot(pmus)
plot(pmus)
invisible(text(getSpPPolygonsLabptSlots(pmus), labels=as.character(pmus$PMU), cex=0.4))
pmus
pmu
pmu$Shape_area[pmu$PMU == "Mountain Valley"]
sqrt(pmu$Shape_area[pmu$PMU == "Mountain Valley"])
sqrt(pmu$Shape_area[pmu$PMU == "Mountain Valley"])/1000
plot(pmus[pmus$PMU == "Mountain Valley",])
extent(pmus[pmus$PMU == "Mountain Valley",])
2645563-2483744
1610457-1383027
161819*227430
sqrt(161819*227430)
sqrt(161819*227430)/1000
sqrt(161819*227430)/1000*.621
plot(extent(pmus[pmus$PMU == "Mountain Valley",]), add = T, border = "red")
227430/1000
227430/1000*.62
161819/1000*.62
pmu$Shape_area[pmu$PMU == "Mountain Valley"]
sqrt(pmu$Shape_area[pmu$PMU == "Mountain Valley"])
sqrt(pmu$Shape_area[pmu$PMU == "Mountain Valley"])/1000
sqrt(pmus$Shape_area[pmus$PMU == "Mountain Valley"])/1000
names(pmus)
slot(pmus)
slot(pmus, "polygons")
str(pmus)
sapply(pmus, slots)
sapply(pmus, slot)
sapply(slot(pmus, "polygons"), slot, "area")
slotNames(pmus)
slot(pmus, "polygons")
slotNames(slot(pmus, "polygons"))
pmus@polygons
pmus@polygons@area
sapply(pmus@polygons, slot, "area")
slotNames(pmus)
pmus@data
sapply(pmus@polygons, slot, "area")
pmus@data$PMU
sapply(pmus@polygons, slot, "area")[pmus$PMU == "Mountain Valley"]
sqrt(sapply(pmus@polygons, slot, "area")[pmus$PMU == "Mountain Valley"])
sqrt(sapply(pmus@polygons, slot, "area")[pmus$PMU == "Mountain Valley"])/1000
sqrt(sapply(pmus@polygons, slot, "area")[pmus$PMU == "Mountain Valley"])/1000*.62
mvA <- sapply(pmus@polygons, slot, "area")[pmus$PMU == "Mountain Valley"]
gmus <- readOGR("GIS Layers/IDFG Game Management Units", "GameManagementUnits")
plot(gmus)
sapply(pmu@polygons, slot, "area")[pmu$PMU == "Mountain Valley"]
gmus$Shape_area[gmus$NAME == "30"]
sapply(gmus@polygons, slot, "area")[gmus$NAME == "30"]
gmu30Area <- gmus$Shape_area[gmus$NAME == "30"]
30Area <- gmus$Shape_area[gmus$NAME == "30"]
g30Area <- gmus$Shape_area[gmus$NAME == "30"]
gmu30Area <- gmus$Shape_area[gmus$NAME == "30"]
gmu30Area/mvA
plot(gmus[], add = T, border = "red")
plot(gmus)
plot(pmu[pmu$PMU == "Mountain Valley",], add = T, border = "red")
1/17
2/17
pmu$Shape_area[pmu$PMU == "Mountain Valley"]
gmu30Area
rm(pmu)
plot(pmu)
rm(pmus)
# Load GMUs
gmus <- readOGR("GIS Layers/IDFG Game Management Units", "GameManagementUnits")
load("GIS Layers/Mule Deer PMUs/dictionaries.RData")
# Read in GMU/PMU lookup table
lookup <- read.csv("GIS Layers/Mule Deer PMUs/MD PMUs and units within.csv")
lu <- lookup %>%
mutate_all(funs(gsub("^$", NA, .))) %>%
select(-PMU.ID) %>%
gather("tbd", "GMU", -1) %>%
select(-tbd) %>%
rename(PMU = PMU.name) %>%
filter(!is.na(GMU)) %>%
rbind(c("YNP", "YNP")) %>%
mutate(PMU = gsub("^MD_", "", .$PMU),
GMU = as.factor(GMU) )
# Dissolve to PMUs and reattach dataframe info
gmus@data <- left_join(gmus@data, lu, by = c("NAME" = "GMU"))
# Dissolve
pmus <- aggregate(gmus, list(gmus$PMU), FUN = first, dissolve = T)
# gUnaryUnion and unionSpatialPolygons are other dissolve funtions, but they lose the
#   dataframe part of the object.
# Plot
plot(pmus)
invisible(text(getSpPPolygonsLabptSlots(pmus), labels=as.character(pmus$PMU), cex=0.4))
sapply(pmus@polygons, slot, "area")[pmus$PMU == "Mountain Valley"]
sapply(pmus@polygons, slot, "area")
pmus@data
pmus$Shape_area <- sapply(pmus@polygons, slot, "area")
pmus@data
dat <- tibble(
name = "Anna",
word = c("unmarked", "abundance", "sampling", "demographics", "time-to-event",
"distribution", "cameras", "population", "elk", "mule deer",
"Idaho", "R", "Bayesian", "likelihood", "quantitative", "space-to-event",
"modeling", "survival", "spatiotemporal"),
importance = c(10, 10, 10, 10, 8, 6, 5, 6, 3, 1, 1, 3, 4, 6, 5, 6, 4, 4, 4)
)
library(dplyr)
dat <- tibble(
name = "Anna",
word = c("unmarked", "abundance", "sampling", "demographics", "time-to-event",
"distribution", "cameras", "population", "elk", "mule deer",
"Idaho", "R", "Bayesian", "likelihood", "quantitative", "space-to-event",
"modeling", "survival", "spatiotemporal"),
importance = c(10, 10, 10, 10, 8, 6, 5, 6, 3, 1, 1, 3, 4, 6, 5, 6, 4, 4, 4)
)
head(dat)
as.data.frame(dat)
dat <- data.frame(name = "Anna",
word = c("shiny",
"version control",
"web scraping",
"automating",
"purrr"),
stringsAsFactors = F)
dat
str(dat)
summary(dat)
knitr::opts_chunk$set(echo = TRUE)
xtable(dat)
xtable::xtable(dat)
dat <- data.frame(name = "Anna",
word = c("shiny",
"web scraping",
"automating",
"tidyverse",
"Git"),
order = 1:5,
stringsAsFactors = F)
xtable::xtable(dat)
stargazer::stargazer(dat)
install.packages("stargazer")
stargazer::stargazer(dat, summary = F, type = "html", title = "stargazer")
stargazer::stargazer(dat, summary = F, rownames = F
type = "html", title = "stargazer")
50.19+.49
(50.19+.49)/6
(50.19+.49)/6*2
(50.19+.49)/6*3
25.34+16.89+8.45
dat <- function(){
out <- data.frame(name = "Anna",
word = c("shiny",
"web scraping",
"automating",
"tidyverse",
"Git"),
order = 1:5,
stringsAsFactors = F)
return(out)
}
dat()
knitr::kable(dat, caption = "Example data frame", align = "l")
dat <- data.frame(name = "Anna",
word = c("shiny",
"web scraping",
"automating",
"tidyverse",
"Git"),
order = 1:5,
stringsAsFactors = F)
knitr::kable(dat, caption = "Example data frame", align = "l")
knitr::kable(dat, caption = "Example data frame", align = "l", format = "markdown", padding = 0)
my.fn <- function(){
out <- data.frame(name = "Anna",
word = c("shiny",
"web scraping",
"automating",
"tidyverse",
"Git"),
order = 1:5,
stringsAsFactors = F)
return(out)
}
tst <- my.fn()
tst
out <- data.frame(name = name,
word = c("shiny",
"web scraping",
"automating",
"tidyverse",
"Git"),
order = 1:5,
stringsAsFactors = F)
my.fn <- function(name){
out <- data.frame(name = name,
word = c("shiny",
"web scraping",
"automating",
"tidyverse",
"Git"),
order = 1:5,
stringsAsFactors = F)
return(out)
}
tst <- my.fn(name = "AnnA")
tst
knitr::opts_chunk$set(echo = TRUE)
a <- c("a", "sdf", "frog")
a <- c("a", "sdf", "frog")
a[a == "sdf"]
a=="sdf"
42.72/3
source("GitHub/packages.R")
# Plot psi by sample site
load("Results/occ.psiHabpDot.RData") # occ.psiHabpDot JAGS output
psi <- occ.psiHabpDot$BUGSoutput$mean$psi
# Put that on samp.sp
samp.sp <- readOGR("Spatial files/Sampling_cells_4_state_Final_7_9_15",
"Sampling_Cells_4_state_Final_7_9_15")
samp.sp$psi <- psi
spplot(samp.sp, "psi")
# Load packages
library(rgdal) # readOGR, spTransform
library(sp) # for SpatialPointsDataFrames
library(raster) # polygon intersetcion
library(rgeos) # polygon intersection
library(sf) # Simple features
library(tidyverse)
# Plot psi by sample site
load("Results/occ.psiHabpDot.RData") # occ.psiHabpDot JAGS output
psi <- occ.psiHabpDot$BUGSoutput$mean$psi
# Put that on samp.sp
samp.sp <- readOGR("Spatial files/Sampling_cells_4_state_Final_7_9_15",
"Sampling_Cells_4_state_Final_7_9_15")
setwd("C:/Users/anna.moeller/Documents/GitHub/School/Demographic Parameters/Lab Day 2_3 RMark")
data(dipper)
dipper.model=mark(dipper) # Use defaults: CJS model, phi(.).p(.)
run.dipper=function(){
#
# Process data
#
dipper.processed=process.data(dipper,groups=("sex"))
#
# Create default design data
#
dipper.ddl=make.design.data(dipper.processed)
#
# Add Flood covariates for Phi and p that have different values
#
dipper.ddl$Phi$Flood=0
dipper.ddl$Phi$Flood[dipper.ddl$Phi$time==2 | dipper.ddl$Phi$time==3]=1
dipper.ddl$p$Flood=0
dipper.ddl$p$Flood[dipper.ddl$p$time==3]=1
#  Define range of models for Phi
Phidot=list(formula=~1)
Phitime=list(formula=~time)
Phisex=list(formula=~sex)
Phisextime=list(formula=~sex+time)
Phisex.time=list(formula=~sex*time)
PhiFlood=list(formula=~Flood)
#  Define range of models for p
pdot=list(formula=~1)
ptime=list(formula=~time)
psex=list(formula=~sex)
psextime=list(formula=~sex+time)
psex.time=list(formula=~sex*time)
pFlood=list(formula=~Flood)
# Run assortment of models
dipper.phidot.pdot          =mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phidot,p=pdot))
dipper.phidot.pFlood      	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phidot,p=pFlood))
dipper.phidot.psex        	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phidot,p=psex))
dipper.phidot.ptime       	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phidot,p=ptime))
dipper.phidot.psex.time		=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phidot,p=psex.time))
dipper.phitime.ptime      	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phitime, p=ptime))
dipper.phitime.pdot       	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phitime,p=pdot))
dipper.phitime.psex		=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phitime,p=psex))
dipper.phitime.psex.time	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phitime,p=psex.time))
dipper.phiFlood.pFlood    	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=PhiFlood, p=pFlood))
dipper.phisex.pdot        	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phisex,p=pdot))
dipper.phisex.psex        	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phisex,p=psex))
dipper.phisex.psex.time        	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phisex,p=psex.time))
dipper.phisex.ptime       	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phisex,p=ptime))
dipper.phisextime.psextime	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phisextime,p=psextime))
dipper.phisex.time.psex.time	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phisex.time,p=psex.time))
dipper.phisex.time.psex 	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phisex.time,p=psex))
dipper.phisex.time.pdot		=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phisex.time,p=pdot))
dipper.phisex.time.ptime	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phisex.time,p=ptime))
#
# Return model table and list of models
#
return(collect.models() )
}
dipper.results=run.dipper()
library(RMark)
data(dipper)
dipper.model=mark(dipper) # Use defaults: CJS model, phi(.).p(.)
run.dipper=function(){
#
# Process data
#
dipper.processed=process.data(dipper,groups=("sex"))
#
# Create default design data
#
dipper.ddl=make.design.data(dipper.processed)
#
# Add Flood covariates for Phi and p that have different values
#
dipper.ddl$Phi$Flood=0
dipper.ddl$Phi$Flood[dipper.ddl$Phi$time==2 | dipper.ddl$Phi$time==3]=1
dipper.ddl$p$Flood=0
dipper.ddl$p$Flood[dipper.ddl$p$time==3]=1
#  Define range of models for Phi
Phidot=list(formula=~1)
Phitime=list(formula=~time)
Phisex=list(formula=~sex)
Phisextime=list(formula=~sex+time)
Phisex.time=list(formula=~sex*time)
PhiFlood=list(formula=~Flood)
#  Define range of models for p
pdot=list(formula=~1)
ptime=list(formula=~time)
psex=list(formula=~sex)
psextime=list(formula=~sex+time)
psex.time=list(formula=~sex*time)
pFlood=list(formula=~Flood)
# Run assortment of models
dipper.phidot.pdot          =mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phidot,p=pdot))
dipper.phidot.pFlood      	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phidot,p=pFlood))
dipper.phidot.psex        	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phidot,p=psex))
dipper.phidot.ptime       	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phidot,p=ptime))
dipper.phidot.psex.time		=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phidot,p=psex.time))
dipper.phitime.ptime      	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phitime, p=ptime))
dipper.phitime.pdot       	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phitime,p=pdot))
dipper.phitime.psex		=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phitime,p=psex))
dipper.phitime.psex.time	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phitime,p=psex.time))
dipper.phiFlood.pFlood    	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=PhiFlood, p=pFlood))
dipper.phisex.pdot        	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phisex,p=pdot))
dipper.phisex.psex        	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phisex,p=psex))
dipper.phisex.psex.time        	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phisex,p=psex.time))
dipper.phisex.ptime       	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phisex,p=ptime))
dipper.phisextime.psextime	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phisextime,p=psextime))
dipper.phisex.time.psex.time	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phisex.time,p=psex.time))
dipper.phisex.time.psex 	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phisex.time,p=psex))
dipper.phisex.time.pdot		=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phisex.time,p=pdot))
dipper.phisex.time.ptime	=mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phisex.time,p=ptime))
#
# Return model table and list of models
#
return(collect.models() )
}
dipper.results=run.dipper()
dipper.results
