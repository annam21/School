opt <- optim(par = log(1/mean(pictime, na.rm = T)),
exp.logl.fn,
data = dat,
zmax = 5,
control = list(fnscale = -1),
hessian = T)
opt
estlam <- exp(opt$par)
estlam
# size of hole compared to bounds:
holeA <- (max(hole)-min(hole))^2
totA <- (max(bounds)-min(bounds))^2
prop <- holeA/totA
estN <- estlam/prop
estN
holeA <- 60*60
totA <- 60*60
holeA <- 9
prop <- holeA/totA
prop
estN <- estlam/prop
estN
0.028/prop
0.026/prop
0.024/prop
0.025/prop
prop
6400/9
9/6400
80*80
estlam
tst2 <- rw.cam(30, 30, 3.6, 5000, bounds = c(0,60), c(20,23))
tst1
tst2
hist(tst2)
dat <- list(pictime = matrix(tst2, nrow =1), nsite=1, ncam = 30, censortime = matrix(rep(5000, 30)))
dat
dat <- list(pictime = matrix(tst2, nrow =1), nsite=1, ncam = 30, censortime = matrix(rep(5000, 30), nrow=1))
dat
opt2 <- optim(par = log(1/mean(pictime, na.rm = T)),
exp.logl.fn,
data = dat,
zmax = 5,
control = list(fnscale = -1),
hessian = T)
opt2
estlam2 <- exp(opt2$par)
estlam2
estlam2/prop
prop
tst.10.40 <- rw.cam(30, trueN = 10, 3.6, 5000, bounds = c(0,40), c(20,23))
ts
tst
tst.10.40
dat <- list(pictime = matrix(tst.10.40, nrow =1), nsite=1, ncam = 30, censortime = matrix(rep(5000, 30), nrow=1))
opt3 <- optim(par = log(1/mean(pictime, na.rm = T)),
exp.logl.fn,
data = dat,
zmax = 5,
control = list(fnscale = -1),
hessian = T)
estlam3 <- exp(opt3$par)
estlam3
estlam
estlam2
.07/.028
estlam3/estlam
60*60
40*40
3600/1600
9/3600
9/1600
0.005625/.0025
estlam3/(9/1600)
estlam3
.05625/(9/1600)
9/3600
9/1600
source("GitHub/Time2Event_Abundance/Time to Event/Random Walk/for loop RW.R")
# Get data for ncam cameras and trueN. Repeat for a bunch of datasets
ncam <- 50
max.steps <- 5000
bounds <- c(0, 60)
hole <- c(20, 23)
ndatasets <- 30
# # Each steplength with trueN = 10, ncam = 40, steps = 5000, bounds 0-80, takes about 9 minutes
# # 30 datasets, ncam =50, trueN=10, steps=5000, bounds 0-80 takes 14 minutes for each steplength
st <- Sys.time()
pop10.1.b60 <- lapply(rep(ncam, ndatasets), rw.cam, trueN = 10, steplen = 1, max.steps, bounds, hole)
Sys.time() - st
st <- Sys.time()
pop10.2.b60 <- lapply(rep(ncam, ndatasets), rw.cam, trueN = 10, steplen = 2, max.steps, bounds, hole)
pop10.3.b60 <- lapply(rep(ncam, ndatasets), rw.cam, trueN = 10, steplen = 3, max.steps, bounds, hole)
pop10.4.b60 <- lapply(rep(ncam, ndatasets), rw.cam, trueN = 10, steplen = 4, max.steps, bounds, hole)
pop10.5.b60 <- lapply(rep(ncam, ndatasets), rw.cam, trueN = 10, steplen = 5, max.steps, bounds, hole)
pop10.05.b60 <- lapply(rep(ncam, ndatasets), rw.cam, trueN = 10, steplen = 0.5, max.steps, bounds, hole)
Sys.time()-st
st <- Sys.time()
pop30.1.b60 <- lapply(rep(ncam, ndatasets), rw.cam, trueN = 30, steplen = 1, max.steps, bounds, hole)
Sys.time() - st
st <- Sys.time()
pop30.2.b60 <- lapply(rep(ncam, ndatasets), rw.cam, trueN = 30, steplen = 2, max.steps, bounds, hole)
pop30.3.b60 <- lapply(rep(ncam, ndatasets), rw.cam, trueN = 30, steplen = 3, max.steps, bounds, hole)
pop30.4.b60 <- lapply(rep(ncam, ndatasets), rw.cam, trueN = 30, steplen = 4, max.steps, bounds, hole)
pop30.5.b60 <- lapply(rep(ncam, ndatasets), rw.cam, trueN = 30, steplen = 5, max.steps, bounds, hole)
pop30.05.b60 <- lapply(rep(ncam, ndatasets), rw.cam, trueN = 30, steplen = 0.5, max.steps, bounds, hole)
Sys.time()-st
# Bounds = c(0, 60), hole = c(20, 23), ncam = 50, trueN = 10 or 30,
#   max.steps = 5000, 30 datasets
save(pop10.1.b60, file = "GitHub/Time2Event_Abundance/Time to Event/Random Walk/pop10.1.b60.RData")
save(pop10.2.b60, file = "GitHub/Time2Event_Abundance/Time to Event/Random Walk/pop10.2.b60.RData")
save(pop10.3.b60, file = "GitHub/Time2Event_Abundance/Time to Event/Random Walk/pop10.3.b60.RData")
save(pop10.4.b60, file = "GitHub/Time2Event_Abundance/Time to Event/Random Walk/pop10.4.b60.RData")
save(pop10.5.b60, file = "GitHub/Time2Event_Abundance/Time to Event/Random Walk/pop10.5.b60.RData")
save(pop10.05.b60, file = "GitHub/Time2Event_Abundance/Time to Event/Random Walk/pop10.05.b60.RData")
save(pop30.1.b60, file = "GitHub/Time2Event_Abundance/Time to Event/Random Walk/pop30.1.b60.RData")
save(pop30.2.b60, file = "GitHub/Time2Event_Abundance/Time to Event/Random Walk/pop30.2.b60.RData")
save(pop30.3.b60, file = "GitHub/Time2Event_Abundance/Time to Event/Random Walk/pop30.3.b60.RData")
save(pop30.4.b60, file = "GitHub/Time2Event_Abundance/Time to Event/Random Walk/pop30.4.b60.RData")
save(pop30.5.b60, file = "GitHub/Time2Event_Abundance/Time to Event/Random Walk/pop30.5.b60.RData")
save(pop30.05.b60, file = "GitHub/Time2Event_Abundance/Time to Event/Random Walk/pop30.05.b60.RData")
# Plot!!
ggdat1 <- data.frame(steplen = c(rep(c(0.5, 1:5), each = 30)),
estN = c(estN10.05.b60, estN10.1.b60, estN10.2.b60,
estN10.3.b60, estN10.4.b60, estN10.5.b60) ) %>%
mutate(trueN = 10)
ggdat2 <- data.frame(steplen = c(rep(c(0.5, 1:5), each = 30)),
estN = c(estN30.05.b60, estN30.1.b60, estN30.2.b60,
estN30.3.b60, estN30.4.b60, estN30.5.b60) ) %>%
mutate(trueN = 30)
ggdat <- bind_rows(ggdat1, ggdat2) %>%
mutate(pop = as.factor(trueN))
ggplot(ggdat) +
geom_point(aes(x = steplen, y = estN, color = pop)) +
geom_smooth(aes(x = steplen, y = estN, color = pop), method = "lm", se = F)
source("GitHub/Time2Event_Abundance/Time to Event/Random Walk/for loop RW.R")
estN10.05.b60 <- sapply(pop10.05.b60, sim, ncam, max.steps, bounds, hole)
estN10.1.b60 <- sapply(pop10.1.b60, sim, ncam, max.steps, bounds, hole)
estN10.2.b60 <- sapply(pop10.2.b60, sim, ncam, max.steps, bounds, hole)
estN10.3.b60 <- sapply(pop10.3.b60, sim, ncam, max.steps, bounds, hole)
estN10.4.b60 <- sapply(pop10.4.b60, sim, ncam, max.steps, bounds, hole)
estN10.5.b60 <- sapply(pop10.5.b60, sim, ncam, max.steps, bounds, hole)
estN30.05.b60 <- sapply(pop30.05.b60, sim, ncam, max.steps, bounds, hole)
estN30.1.b60 <- sapply(pop30.1.b60, sim, ncam, max.steps, bounds, hole)
estN30.2.b60 <- sapply(pop30.2.b60, sim, ncam, max.steps, bounds, hole)
estN30.3.b60 <- sapply(pop30.3.b60, sim, ncam, max.steps, bounds, hole)
estN30.4.b60 <- sapply(pop30.4.b60, sim, ncam, max.steps, bounds, hole)
estN30.5.b60 <- sapply(pop30.5.b60, sim, ncam, max.steps, bounds, hole)
# Plot!!
# Plot!!
ggdat1 <- data.frame(steplen = c(rep(c(0.5, 1:5), each = 30)),
estN = c(estN10.05.b60, estN10.1.b60, estN10.2.b60,
estN10.3.b60, estN10.4.b60, estN10.5.b60) ) %>%
mutate(trueN = 10)
ggdat2 <- data.frame(steplen = c(rep(c(0.5, 1:5), each = 30)),
estN = c(estN30.05.b60, estN30.1.b60, estN30.2.b60,
estN30.3.b60, estN30.4.b60, estN30.5.b60) ) %>%
mutate(trueN = 30)
ggdat <- bind_rows(ggdat1, ggdat2) %>%
mutate(pop = as.factor(trueN))
ggplot(ggdat) +
geom_point(aes(x = steplen, y = estN, color = pop)) +
geom_smooth(aes(x = steplen, y = estN, color = pop), method = "lm", se = F)
# Plot!!
ggdat1 <- data.frame(steplen = c(rep(c(0.5, 1:5), each = 30)),
estN = c(estN10.05, estN10.1, estN10.2, estN10.3, estN10.4, estN10.5) ) %>%
mutate(trueN = 10,
bounds = 80)
ggdat2 <- data.frame(steplen = c(rep(c(0.5, 1:5), each = 30)),
estN = c(estN30.05, estN30.1, estN30.2, estN30.3, estN30.4, estN30.5) ) %>%
mutate(trueN = 30,
bounds = 80)
tst <- ggdat
# Plot!!
ggdat3 <- data.frame(steplen = c(rep(c(0.5, 1:5), each = 30)),
estN = c(estN10.05.b60, estN10.1.b60, estN10.2.b60,
estN10.3.b60, estN10.4.b60, estN10.5.b60) ) %>%
mutate(trueN = 10,
bounds = 60)
ggdat4 <- data.frame(steplen = c(rep(c(0.5, 1:5), each = 30)),
estN = c(estN30.05.b60, estN30.1.b60, estN30.2.b60,
estN30.3.b60, estN30.4.b60, estN30.5.b60) ) %>%
mutate(trueN = 30,
bounds = 60)
ggdat <- bind_rows(ggdat1, ggdat2, ggdat3, ggdat4) %>%
mutate(pop = as.factor(trueN))
ggdat
head(ggdat)
class(ggdat$bounds)
ggdat <- bind_rows(ggdat1, ggdat2, ggdat3, ggdat4) %>%
mutate(pop = as.factor(trueN),
bounds = as.factor(bounds))
ggplot(ggdat) +
geom_point(aes(x = steplen, y = estN, color = pop)) +
geom_smooth(aes(x = steplen, y = estN, color = pop), method = "lm", se = F)
ggplot(ggdat) +
geom_point(aes(x = steplen, y = estN, color = c(pop, bounds)))
ggplot(ggdat) +
geom_point(aes(x = steplen, y = estN, color = interaction(pop, bounds)))
ggplot(ggdat) +
geom_point(aes(x = steplen, y = estN, color = interaction(pop, bounds))) +
geom_smooth(aes(x = steplen, y = estN, color = interaction(pop, bounds)),
method = "lm", se = F)
9/6400
tst <- lm(ggdat1$estN~ggdat1$steplen)
tst2 <- lm(ggdat2$estN~ggdat2$steplen)
tst3 <- lm(ggdat3$estN~ggdat3$steplen)
tst4 <- lm(ggdat4$estN~ggdat4$steplen)
tst
truestep <- function(trueN, lm){
(trueN - lm$coefficients[1])/lm$coefficients[2]
}
truestep(tst, 10)
truestep(10, tst)
truestep(30, tst2)
truestep(10, tst3)
truestep(30, tst4)
9/3600
(9/3600)/ (9/6400)
(9/3600) - (9/6400)
tst <- data.frame(bounds = c(80, 80, 60, 60),
truestep = c(truestep(10, tst), truestep(30, tst2),
truestep(10, tst3), truestep(30, tst4) ))
tst
plot(tst$bounds, tst$truestep)
ggplot(tst, aes(x = bounds, y = truestep)) +
geom_point()
ggplot(tst, aes(x = bounds, y = truestep)) +
geom_point() +
geom_smooth(method = "lm")
lm(tst$truestep ~ tst$bounds)
tst <- data.frame(bounds = c(80, 80, 60, 60),
prop = c(0.001406, 0.001406, 0.0025, 0.0025)
truestep = c(truestep(10, tst), truestep(30, tst2),
truestep(10, tst3), truestep(30, tst4) ))
tst <- data.frame(bounds = c(80, 80, 60, 60),
prop = c(0.001406, 0.001406, 0.0025, 0.0025),
truestep = c(truestep(10, tst), truestep(30, tst2),
truestep(10, tst3), truestep(30, tst4) ))
tst <- data.frame(bounds = c(80, 80, 60, 60),
prop = c(0.001406, 0.001406, 0.0025, 0.0025)
)
tst
tst <- data.frame(bounds = c(80, 80, 60, 60),
prop = c(0.001406, 0.001406, 0.0025, 0.0025),
truestep = c(truestep(10, tst), truestep(30, tst2),
truestep(10, tst3), truestep(30, tst4) ))
bounds = c(80, 80, 60, 60)
prop = c(0.001406, 0.001406, 0.0025, 0.0025)
c(80, 80, 60, 60)
c(0.001406, 0.001406, 0.0025, 0.0025)
c(truestep(10, tst), truestep(30, tst2),
truestep(10, tst3), truestep(30, tst4) )
truestep(30, tst2)
truestep(10, tst)
truestep <- function(trueN, lm){
(trueN - lm$coefficients[1])/lm$coefficients[2]
}
c(truestep(10, tst), truestep(30, tst2),
truestep(10, tst3), truestep(30, tst4) )
truestep(10, tst)
tst
tst <- lm(ggdat1$estN~ggdat1$steplen)
c(truestep(10, tst), truestep(30, tst2),
truestep(10, tst3), truestep(30, tst4) )
df <- data.frame(bounds = c(80, 80, 60, 60),
prop = c(0.001406, 0.001406, 0.0025, 0.0025),
truestep = c(truestep(10, tst), truestep(30, tst2),
truestep(10, tst3), truestep(30, tst4) ))
df
ggplot(tst, aes(x = prop, y = truestep)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(df, aes(x = prop, y = truestep)) +
geom_point() +
geom_smooth(method = "lm")
lm(df$prop ~ df$bounds)
lm(df$bounds ~ df$bounds)
lm(df$truestep ~ df$bounds)
lm(df$truestep ~ df$prop)
df <- data.frame(bounds = c(80, 80, 60, 60),
prop = c(0.001406, 0.001406, 0.0025, 0.0025),
truestep = c(truestep(10, tst), truestep(30, tst2),
truestep(10, tst3), truestep(30, tst4) ),
pop = as.factor(c(10, 30, 10, 30)))
df
ggplot(df, aes(x = prop, y = truestep, color = pop)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(df, aes(x = prop, y = truestep)) +
geom_point(aes(color = pop)) +
geom_smooth(method = "lm")
ggplot(df, aes(x = bounds, y = truestep)) +
geom_point(aes(color = pop)) +
geom_smooth(method = "lm")
lm(df$truestep ~ df$prop)
lm(df$truestep ~ df$bounds)
1/360
1/640
cf
.001406/(1/360)
.0025/(1/360)
.001406/(1/640)
1/3.6
# Set working directory
setwd("C:/Users/anna.moeller/Documents/GitHub")
# Load data
load("CameraTrapStudy/2015 data/pics.wide20160804.RData")
lions <- pics %>%
select(site, plot, cam, timeLST, dateLST, otherpresent, lion.kitten, lion.adult, opstate,
easting, northing, plot.start, plot.end)
lions$lion.kitten[is.na(lions$lion.kitten)] <- 0
lions$lion.adult[is.na(lions$lion.adult)] <- 0
lions %>%
group_by(plot) %>%
summarise(l = any(lion.adult > 0 | lion.kitten > 0))
source("C:/Users/anna.moeller/Documents/GitHub/packages.R")
# Lions (Best option)
lions <- pics %>%
select(site, plot, cam, timeLST, dateLST, otherpresent, lion.kitten, lion.adult, opstate,
easting, northing, plot.start, plot.end)
lions$lion.kitten[is.na(lions$lion.kitten)] <- 0
lions$lion.adult[is.na(lions$lion.adult)] <- 0
lions %>%
group_by(plot) %>%
summarise(l = any(lion.adult > 0 | lion.kitten > 0))
load("C:/Users/anna.moeller/Documents/GitHub/CameraTrapStudy/2015 data/access.sum.RData")
acc <- access.sum
# Make a dataframe for camera number 1-9
camnum <- select(access.sum, camID, plot, camnum) %>%
# Drop AM157 because there were two cameras in this cell and the card got lost
filter(camnum != 0)
camnum
# Start by making an eh by day
source("C:/Users/anna.moeller/Documents/GitHub/Camera-trap-study/Image Analysis/eh_fn.R")
cam.eh <- eh_fn(pics, access.sum, starthour = "12:00:00", endhour = "12:00:00",
by_t = "day", animal.eh = F)
# Look at the week I'm using and if at least 4 of the days are open, call it open
effort <- filter(cam.eh, ideal.date >= as.Date("2016-02-01") &
ideal.date <= as.Date("2016-02-08")) %>%
group_by(cam) %>%
summarise(test = length(which(open == T))) %>%
mutate(open = ifelse(test >= 4, T, F)) %>%
select(-test)
source("C:/Users/anna.moeller/Documents/GitHub/CameraTrapStudy/Image Analysis/eh_fn.R")
cam.eh <- eh_fn(pics, access.sum, starthour = "12:00:00", endhour = "12:00:00",
by_t = "day", animal.eh = F)
cam.eh <- eh_fn(pics, starthour = "12:00:00", endhour = "12:00:00",
by_t = "day", datelim = NULL, animal.eh = F)
head(cam.eh)
# Look at the week I'm using and if at least 4 of the days are open, call it open
effort <- filter(cam.eh, ideal.date >= as.Date("2016-02-01") &
ideal.date <= as.Date("2016-02-08")) %>%
group_by(cam) %>%
summarise(test = length(which(open == T))) %>%
mutate(open = ifelse(test >= 4, T, F)) %>%
select(-test)
head(effort)
getwd()
setwd("C:/Users/anna.moeller/Documents/GitHub/GitHub/School/Demographic Parameters/Lab Day 9 Multistate Models")
setwd("C:/Users/anna.moeller/Documents/GitHub/School/Demographic Parameters/Lab Day 9 Multistate Models")
dat <- convert.inp("MSSURV.INP", covariates = NULL, use.comments = F)
library(RMark)
dat <- convert.inp("MSSURV.INP", covariates = NULL, use.comments = F)
dat <- convert.inp("MSSURV.inp", covariates = NULL, use.comments = F)
?convert.inp
dat <- convert.inp("MSSURV.inp", group.df = NULL , covariates = NULL, use.comments = F)
dat <- convert.inp("MSSURV.INP", group.df = NULL , covariates = NULL, use.comments = F)
dat <- convert.inp("MSSURV.inp", group.df = NULL , covariates = NULL, use.comments = F)
dat <- convert.inp("MSSURV.inp", group.df = NULL , covariates = NULL, use.comments = F)
dat <- convert.inp("MSSURV.inp", group.df = NULL , covariates = NULL, use.comments = F)
dat <- convert.inp("MSSURV.inp", group.df = NULL , covariates = NULL, use.comments = F)
dat.proc <- process.data(dat, model = "Multistrata")
head(dat.proc)
?process.data
str(dat.proc)
dat.ddl <- make.design.data(dat.ddl)
dat.ddl <- make.design.data(dat.proc)
?mark
# Define model formulae
#  S
Sdot <- list(formula = ~1, link = "sin")
Stime <- list(formula = ~time, link = "sin")
# p
pdot <- list(formula = ~1, link = "sin")
ptime <- list(formula = ~time, link = "sin") # random time-varying
# Psi
Psidot <- list(formula = ~1, link = "sin")
Psitime <- list(formula = ~time, link = "sin")
# Define RMark specs
run.mod <- function(S, p, Psi) {
mark(
dat.proc,
dat.ddl,
model = "Multistrata",
model.parameters = list(S = S, p = p, Psi = Psi),
output = F,
delete = T
)
}
Sdot.pdot.Psidot <- run.mod(Sdot, pdot, Psidot)
# Define models to run
mods <- function() {
Sdot.pdot.Psidot <- run.mod(Sdot, pdot, Psidot)
Sdot.pdot.Psitime <- run.mod(Sdot, pdot, Psitime)
Sdot.ptime.Psidot <- run.mod(Sdot, ptime, Psidot)
Sdot.ptime.Psitime <- run.mod(Sdot, ptime, Psitime)
Stime.pdot.Psidot <- run.mod(Stime, pdot, Psidot)
Stime.pdot.Psitime <- run.mod(Stime, pdot, Psitime)
Stime.ptime.Psidot <- run.mod(Stime, ptime, Psidot)
Stime.ptime.Psitime <- run.mod(Stime, ptime, Psitime)
}
mods
res <- mods()
# Define model formulae
#  S
Sdot <- list(formula = ~1, link = "sin")
Stime <- list(formula = ~time)
# p
pdot <- list(formula = ~1, link = "sin")
ptime <- list(formula = ~time) # random time-varying
# Psi
Psidot <- list(formula = ~1, link = "sin")
Psitime <- list(formula = ~time)
# Define RMark specs
run.mod <- function(S, p, Psi) {
mark(
dat.proc,
dat.ddl,
model = "Multistrata",
model.parameters = list(S = S, p = p, Psi = Psi),
output = F,
delete = T
)
}
# Define models to run
mods <- function() {
Sdot.pdot.Psidot <- run.mod(Sdot, pdot, Psidot)
Sdot.pdot.Psitime <- run.mod(Sdot, pdot, Psitime)
Sdot.ptime.Psidot <- run.mod(Sdot, ptime, Psidot)
Sdot.ptime.Psitime <- run.mod(Sdot, ptime, Psitime)
Stime.pdot.Psidot <- run.mod(Stime, pdot, Psidot)
Stime.pdot.Psitime <- run.mod(Stime, pdot, Psitime)
Stime.ptime.Psidot <- run.mod(Stime, ptime, Psidot)
Stime.ptime.Psitime <- run.mod(Stime, ptime, Psitime)
}
res <- mods()
res
summary(res)
# Define models to run
call.mods <- function() {
Sdot.pdot.Psidot <- run.mod(Sdot, pdot, Psidot)
Sdot.pdot.Psitime <- run.mod(Sdot, pdot, Psitime)
Sdot.ptime.Psidot <- run.mod(Sdot, ptime, Psidot)
Sdot.ptime.Psitime <- run.mod(Sdot, ptime, Psitime)
Stime.pdot.Psidot <- run.mod(Stime, pdot, Psidot)
Stime.pdot.Psitime <- run.mod(Stime, pdot, Psitime)
Stime.ptime.Psidot <- run.mod(Stime, ptime, Psidot)
Stime.ptime.Psitime <- run.mod(Stime, ptime, Psitime)
}
# Call the models
res <- call.mods()
res
summary(res)
dat.ddl$Psi
Sdot.pdot.Psidot <- run.mod(Sdot, pdot, Psidot)
Sdot.pdot.Psitime <- run.mod(Sdot, pdot, Psitime)
summary(Sdot.pdot.Psitime)
res <- call.mods()
res
# Define models to run
call.mods <- function() {
Sdot.pdot.Psidot <- run.mod(Sdot, pdot, Psidot)
Sdot.pdot.Psitime <- run.mod(Sdot, pdot, Psitime)
Sdot.ptime.Psidot <- run.mod(Sdot, ptime, Psidot)
Sdot.ptime.Psitime <- run.mod(Sdot, ptime, Psitime)
Stime.pdot.Psidot <- run.mod(Stime, pdot, Psidot)
Stime.pdot.Psitime <- run.mod(Stime, pdot, Psitime)
Stime.ptime.Psidot <- run.mod(Stime, ptime, Psidot)
Stime.ptime.Psitime <- run.mod(Stime, ptime, Psitime)
return(collect.models() )
}
# Call the models
res <- call.mods()
res
res$Sdot.pdot.Psidog
res$Sdot.pdot.Psidot
summary(res$Sdot.pdot.Psidot)
hhead(dat.ddl$Psi)
head(dat.ddl$Psi)
dat.ddl$Psi <- 0
dat.ddl$Psi[dat.ddl$Psi$stratum == "A" & dat.ddl$Psi$tostratum == "B"] <- 1
dat.ddl$Psi[dat.ddl$Psi$stratum == "B" & dat.ddl$Psi$tostratum == "A"] <- 1
# Make design data
dat.ddl <- make.design.data(dat.proc)
# For funsies, add a covariate that says A->B= B->A
dat.ddl$Psi$AB <- 0
dat.ddl$Psi$AB[dat.ddl$Psi$stratum == "A" & dat.ddl$Psi$tostratum == "B"] <- 1
dat.ddl$Psi$AB[dat.ddl$Psi$stratum == "B" & dat.ddl$Psi$tostratum == "A"] <- 1
head(dat.ddl$Psi)
dat.ddl$Psi
PsiAB <- list(formula = ~AB, link = "mlogit")
tst <- run.mod(Sdot, pdot, PsiAB)
summary(tst)
Psistrat <- list(formula = ~stratum, link = "mlogit")
tst <- run.mod(Sdot, pdot, Psistrat)
summary(tst)
head(dat.ddl$Psi)
tst
summary(tst)
tst <- run.mod(Sdot, pdot, Psidot)
summary(tst)
