writeOGR(sampsites, "Camera Trap Study/GRTS", "stjoe selected sites", driver = "ESRI Shapefile")
writeOGR(sampthirds, "Camera Trap Study/GRTS", "stjoe thirds", driver = "ESRI Shapefile")
# Set working directory
setwd("C:/Users/anna.moeller/Documents")
# Make a shape for unit 6/7
gmus <- readOGR("GIS Layers/IDFG Game Management Units", "GameManagementUnits")
# gmu67 <- gUnion(gmus[gmus$NAME == "6", ], gmus[gmus$NAME == "7", ])
gmu6 <- gmus[gmus$NAME == "6"]
# Read in RSF, define projection, crop to gmu4
rsf <- raster("GIS Layers/Jon Horne/Elk Winter Range RSF.asc")
proj4string(rsf) <- CRS("+proj=tmerc +lat_0=42 +lon_0=-114 +k=0.9996 +x_0=2500000 +y_0=1200000 +ellps=GRS80 +datum=NAD83 +units=m +no_defs +towgs84=0,0,0")
rsf2 <- crop(rsf, extent(gmu6))
# Aggregate
rsf3 <- aggregate(rsf2, 50, fun = mean)
# Select grid cells where the mean RSF value is at least 0.4
rsf3[rsf3 >= 0.4] <- 1
rsf3[rsf3 < 0.4] <- 0
# Bring in GAP raster, crop to extent of rsf2
### I am using resample here which isn't the best ####
### I tried bilinear but nearest neighbor was way better on keeping the 0s
gap <- raster("GIS Layers/GAP.Idaho/gaplc_IDTM")
# tst1 <- resample(gap, rsf2, method = "ngb")
# saveRDS(tst1, file = "Camera Trap Study/GRTS/gap_output_gmu67.RData")
gap2 <- readRDS("Camera Trap Study/GRTS/gap_output_gmu6.RData")
# Get the values for human developed and agricultural areas
develop_vals <- gap@data@attributes[[1]]$VALUE_1[grepl("develop", gap@data@attributes[[1]]$NVC_CLASS, ignore.case = T)]
water_vals <- gap@data@attributes[[1]]$VALUE_1[grepl("open water", gap@data@attributes[[1]]$NVC_CLASS, ignore.case = T)]
quarry_vals <- gap@data@attributes[[1]]$VALUE_1[grepl("quarries", gap@data@attributes[[1]]$NVC_CLASS, ignore.case = T)]
# quarries, mines, gravel pits, and oil wells
bad_vals <- c(as.character(develop_vals), as.character(water_vals), as.character(quarry_vals))
# Make GAP a raster of good and bad sampling areas
gap3 <- gap2
gap3[gap3 %in% bad_vals] <- 0
gap3[gap3 != 0] <- 1
# Aggregate gap
gap4 <- aggregate(gap3, 50, fun = min)
# Combine gap4 and rsf3, if the gap3 is 0, return 0, otherwise return rsf value
winter <- overlay(gap4, rsf3, fun = min)
# Make a shape for unit 6/7
gmus <- readOGR("GIS Layers/IDFG Game Management Units", "GameManagementUnits")
# gmu67 <- gUnion(gmus[gmus$NAME == "6", ], gmus[gmus$NAME == "7", ])
gmu6 <- gmus[gmus$NAME == "6"]
# Read in RSF, define projection, crop to gmu4
rsf <- raster("GIS Layers/Jon Horne/Elk Winter Range RSF.asc")
proj4string(rsf) <- CRS("+proj=tmerc +lat_0=42 +lon_0=-114 +k=0.9996 +x_0=2500000 +y_0=1200000 +ellps=GRS80 +datum=NAD83 +units=m +no_defs +towgs84=0,0,0")
rsf2 <- crop(rsf, extent(gmu6))
# Aggregate
rsf3 <- aggregate(rsf2, 50, fun = mean)
# Select grid cells where the mean RSF value is at least 0.4
rsf3[rsf3 >= 0.4] <- 1
rsf3[rsf3 < 0.4] <- 0
# Bring in GAP raster, crop to extent of rsf2
### I am using resample here which isn't the best ####
### I tried bilinear but nearest neighbor was way better on keeping the 0s
gap <- raster("GIS Layers/GAP.Idaho/gaplc_IDTM")
# tst1 <- resample(gap, rsf2, method = "ngb")
# saveRDS(tst1, file = "Camera Trap Study/GRTS/gap_output_gmu67.RData")
gap2 <- readRDS("Camera Trap Study/GRTS/gap_output_gmu6.RData")
# Make a shape for unit 6/7
gmus <- readOGR("GIS Layers/IDFG Game Management Units", "GameManagementUnits")
# gmu67 <- gUnion(gmus[gmus$NAME == "6", ], gmus[gmus$NAME == "7", ])
gmu6 <- gmus[gmus$NAME == "6", ]
# Read in RSF, define projection, crop to gmu4
rsf <- raster("GIS Layers/Jon Horne/Elk Winter Range RSF.asc")
proj4string(rsf) <- CRS("+proj=tmerc +lat_0=42 +lon_0=-114 +k=0.9996 +x_0=2500000 +y_0=1200000 +ellps=GRS80 +datum=NAD83 +units=m +no_defs +towgs84=0,0,0")
rsf2 <- crop(rsf, extent(gmu6))
# Aggregate
rsf3 <- aggregate(rsf2, 50, fun = mean)
# Select grid cells where the mean RSF value is at least 0.4
rsf3[rsf3 >= 0.4] <- 1
rsf3[rsf3 < 0.4] <- 0
# Bring in GAP raster, crop to extent of rsf2
### I am using resample here which isn't the best ####
### I tried bilinear but nearest neighbor was way better on keeping the 0s
gap <- raster("GIS Layers/GAP.Idaho/gaplc_IDTM")
# tst1 <- resample(gap, rsf2, method = "ngb")
# saveRDS(tst1, file = "Camera Trap Study/GRTS/gap_output_gmu67.RData")
gap2 <- readRDS("Camera Trap Study/GRTS/gap_output_gmu6.RData")
# Get the values for human developed and agricultural areas
develop_vals <- gap@data@attributes[[1]]$VALUE_1[grepl("develop", gap@data@attributes[[1]]$NVC_CLASS, ignore.case = T)]
water_vals <- gap@data@attributes[[1]]$VALUE_1[grepl("open water", gap@data@attributes[[1]]$NVC_CLASS, ignore.case = T)]
quarry_vals <- gap@data@attributes[[1]]$VALUE_1[grepl("quarries", gap@data@attributes[[1]]$NVC_CLASS, ignore.case = T)]
# quarries, mines, gravel pits, and oil wells
bad_vals <- c(as.character(develop_vals), as.character(water_vals), as.character(quarry_vals))
# Make GAP a raster of good and bad sampling areas
gap3 <- gap2
gap3[gap3 %in% bad_vals] <- 0
gap3[gap3 != 0] <- 1
gap4 <- aggregate(gap3, 50, fun = min)
winter <- overlay(gap4, rsf3, fun = min)
winter6 <- mask(winter, gmu6)
# Bring in St. Joe Polygon
stjoe <- readOGR("GIS Layers/Jon Horne", "StJoe_Poly_Projected_Take2")
# Pick out the one big polygon
stjoe <- stjoe[1, ]
# Mask winter6 to the St. Joe polygon
win2 <- mask(winter6, stjoe)
# Make raster into spatial polygons, give each cell a unique ID
winterpoly <- rasterToPolygons(win2, fun = function(x){x == 1})
winterpoly$ID <- seq(1:dim(winterpoly)[1])
# run grts on grid, sample 10, oversample 10
design <- list(None = list(panel = c(Panel = 10), seltype = "Equal", over = 10))
sites <- grts(design = design,
DesignID = "EQUAL",
type.frame = "area",
src.frame = "sp.object",
sp.object = winterpoly,
shapefile = F)
#              shapefile = T,
#              prjfilename = "GIS Layers/IDFG Game Management Units/GameManagementUnits",
#              out.shape = "Camera Trap Study/Maps/grts_sample_panh")
# Pick out the grid cells that were selected
sampsites <- winterpoly[winterpoly$ID %in% sites$ID, ]
# Add attributes to sampsites@data
sampsites$panel <- sapply(sampsites$ID, function(x){sites$panel[sites$ID == x]})
sampsites$siteID <- sapply(sampsites$ID, function(x){sites$siteID[sites$ID == x]})
sampsites$order <- substr(sampsites$siteID, 7, 8)
# Plot the selected sites
plot(winterpoly)
color <- rep("xx", nrow(sampsites@data))
color[sampsites@data$panel == "Panel"] <- "yellow"
color[sampsites@data$panel == "OverSamp"] <- "light blue"
plot(sampsites, add = T, col = color)
plot(winterpoly)
color <- rep("xx", nrow(sampsites@data))
color[sampsites@data$panel == "Panel"] <- "yellow"
color[sampsites@data$panel == "OverSamp"] <- "light blue"
plot(sampsites, add = T, col = color)
plot(win2)
plot(stjoe, add = T)
winterpoly <- rasterToPolygons(win2, fun = function(x){x == 1})
winterpoly$ID <- seq(1:dim(winterpoly)[1])
plot(winterpoly)
plot(win2)
plot(winterpoly, add = T)
# run grts on grid, sample 10, oversample 10
design <- list(None = list(panel = c(Panel = 10), seltype = "Equal", over = 10))
sites <- grts(design = design,
DesignID = "EQUAL",
type.frame = "area",
src.frame = "sp.object",
sp.object = winterpoly,
shapefile = F)
#              shapefile = T,
#              prjfilename = "GIS Layers/IDFG Game Management Units/GameManagementUnits",
#              out.shape = "Camera Trap Study/Maps/grts_sample_panh")
sampsites <- winterpoly[winterpoly$ID %in% sites$ID, ]
sampsites$panel <- sapply(sampsites$ID, function(x){sites$panel[sites$ID == x]})
sampsites$siteID <- sapply(sampsites$ID, function(x){sites$siteID[sites$ID == x]})
sampsites$order <- substr(sampsites$siteID, 7, 8)
# Plot the selected sites
plot(winterpoly)
color <- rep("xx", nrow(sampsites@data))
color[sampsites@data$panel == "Panel"] <- "yellow"
color[sampsites@data$panel == "OverSamp"] <- "light blue"
plot(sampsites, add = T, col = color)
# run grts on grid, sample 10, oversample 10
design <- list(None = list(panel = c(Panel = 10), seltype = "Equal", over = 10))
sites <- grts(design = design,
DesignID = "EQUAL",
type.frame = "area",
src.frame = "sp.object",
sp.object = winterpoly,
shapefile = F)
#              shapefile = T,
#              prjfilename = "GIS Layers/IDFG Game Management Units/GameManagementUnits",
#              out.shape = "Camera Trap Study/Maps/grts_sample_panh")
# Pick out the grid cells that were selected
sampsites <- winterpoly[winterpoly$ID %in% sites$ID, ]
# Add attributes to sampsites@data
sampsites$panel <- sapply(sampsites$ID, function(x){sites$panel[sites$ID == x]})
sampsites$siteID <- sapply(sampsites$ID, function(x){sites$siteID[sites$ID == x]})
sampsites$order <- substr(sampsites$siteID, 7, 8)
# Plot the selected sites
plot(winterpoly)
color <- rep("xx", nrow(sampsites@data))
color[sampsites@data$panel == "Panel"] <- "yellow"
color[sampsites@data$panel == "OverSamp"] <- "light blue"
plot(sampsites, add = T, col = color)
design <- list(None = list(panel = c(Panel = 10), seltype = "Equal", over = 10))
sites <- grts(design = design,
DesignID = "EQUAL",
type.frame = "area",
src.frame = "sp.object",
sp.object = winterpoly,
shapefile = F)
#              shapefile = T,
#              prjfilename = "GIS Layers/IDFG Game Management Units/GameManagementUnits",
#              out.shape = "Camera Trap Study/Maps/grts_sample_panh")
# Pick out the grid cells that were selected
sampsites <- winterpoly[winterpoly$ID %in% sites$ID, ]
# Add attributes to sampsites@data
sampsites$panel <- sapply(sampsites$ID, function(x){sites$panel[sites$ID == x]})
sampsites$siteID <- sapply(sampsites$ID, function(x){sites$siteID[sites$ID == x]})
sampsites$order <- substr(sampsites$siteID, 7, 8)
# Plot the selected sites
plot(winterpoly)
color <- rep("xx", nrow(sampsites@data))
color[sampsites@data$panel == "Panel"] <- "yellow"
color[sampsites@data$panel == "OverSamp"] <- "light blue"
plot(sampsites, add = T, col = color)
# run grts on grid, sample 10, oversample 10
design <- list(None = list(panel = c(Panel = 10), seltype = "Equal", over = 10))
sites <- grts(design = design,
DesignID = "EQUAL",
type.frame = "area",
src.frame = "sp.object",
sp.object = winterpoly,
shapefile = F)
# Pick out the grid cells that were selected
sampsites <- winterpoly[winterpoly$ID %in% sites$ID, ]
# Add attributes to sampsites@data
sampsites$panel <- sapply(sampsites$ID, function(x){sites$panel[sites$ID == x]})
sampsites$siteID <- sapply(sampsites$ID, function(x){sites$siteID[sites$ID == x]})
sampsites$order <- substr(sampsites$siteID, 7, 8)
# Plot the selected sites
plot(winterpoly)
color <- rep("xx", nrow(sampsites@data))
color[sampsites@data$panel == "Panel"] <- "yellow"
color[sampsites@data$panel == "OverSamp"] <- "light blue"
plot(sampsites, add = T, col = color)
# Create 500m grid, then make it into polygons
thirds <- disaggregate(win2, fact = 3)
thirdspoly <- rasterToPolygons(thirds, fun = function(x){x == 1})
# Subset 500m grid to the sampled sites
sampthirds <- gIntersection(thirdspoly, sampsites, byid=TRUE)
# returns a SpatialCollections, subset to the SpatialPolygons
sampthirds <- sampthirds@polyobj
# Make 500m grid SpatialPolygons into SpatialPolygonsDataFrame for writeOGR function
df <- data.frame("attr" = rep(NA, length(sampthirds)))
sampthirds <- SpatialPolygonsDataFrame(sampthirds, data.frame(df), match.ID = F)
# Write shapefiles
writeOGR(winterpoly, "Camera Trap Study/GRTS", "stjoe sampling area", driver = "ESRI Shapefile")
writeOGR(sampsites, "Camera Trap Study/GRTS", "stjoe selected sites", driver = "ESRI Shapefile")
writeOGR(sampthirds, "Camera Trap Study/GRTS", "stjoe thirds", driver = "ESRI Shapefile")
# Write shapefiles
writeOGR(winterpoly, "Camera Trap Study/GRTS", "stjoe sampling area", driver = "ESRI Shapefile")
writeOGR(sampsites, "Camera Trap Study/GRTS", "stjoe selected sites", driver = "ESRI Shapefile")
writeOGR(sampthirds, "Camera Trap Study/GRTS", "stjoe thirds", driver = "ESRI Shapefile")
##
# Load packages
library(dplyr)
library(rgdal) # readOGR, spTransform
library(sp) # for SpatialPolygons, GridTopology, spTransform
library(rgeos) # for gIntersection, gBuffer, etc. functions
library(maptools) # for unionSpatialPolygons (dissolve function)
library(raster) # for dealing with GAP raster
library(spsurvey) # for GRTS
# Set working directory
setwd("C:/Users/anna.moeller/Documents")
# Make a shape for unit 4
gmus <- readOGR("GIS Layers/IDFG Game Management Units", "GameManagementUnits")
gmu4 <- gmus[gmus$NAME == "4", ]
# Read in RSF, define projection, crop to gmu4
rsf <- raster("GIS Layers/Jon Horne/Elk Winter Range RSF.asc")
proj4string(rsf) <- CRS("+proj=tmerc +lat_0=42 +lon_0=-114 +k=0.9996 +x_0=2500000 +y_0=1200000 +ellps=GRS80 +datum=NAD83 +units=m +no_defs +towgs84=0,0,0")
rsf2 <- crop(rsf, extent(gmu4))
# Aggregate
rsf3 <- aggregate(rsf2, 50, fun = mean)
# Select grid cells where the mean RSF value is at least 0.4
rsf3[rsf3 >= 0.4] <- 1
rsf3[rsf3 < 0.4] <- 0
# Bring in GAP raster, crop to extent of rsf2
### I am using resample here which isn't the best ####
### I tried bilinear but nearest neighbor was way better on keeping the 0s
gap <- raster("GIS Layers/GAP.Idaho/gaplc_IDTM")
# gap2 <- resample(gap, rsf2, method = "bilinear")
# gap2 <- crop(gap2, extent(rsf2))
#tst1 <- resample(gap, rsf2, method = "ngb")
#saveRDS(tst1, file = "Camera Trap Study/GRTS/gap_output_panh.RData")
gap2 <- readRDS("Camera Trap Study/GRTS/gap_output_panh.RData")
# Get the values for human developed and agricultural areas
develop_vals <- gap@data@attributes[[1]]$VALUE_1[grepl("develop", gap@data@attributes[[1]]$NVC_CLASS, ignore.case = T)]
ag_vals <- gap@data@attributes[[1]]$VALUE_1[grepl("agricul", gap@data@attributes[[1]]$NVC_CLASS, ignore.case = T)]
water_vals <- gap@data@attributes[[1]]$VALUE_1[grepl("open water", gap@data@attributes[[1]]$NVC_CLASS, ignore.case = T)]
quarry_vals <- gap@data@attributes[[1]]$VALUE_1[grepl("quarries", gap@data@attributes[[1]]$NVC_CLASS, ignore.case = T)]
# quarries, mines, gravel pits, and oil wells
bad_vals <- c(as.character(develop_vals), as.character(quarry_vals))
# Make GAP a raster of good and bad sampling areas
gap3 <- gap2
gap3[gap3 %in% bad_vals] <- 0
gap3[gap3 != 0] <- 1
# Aggregate gap
gap4 <- aggregate(gap3, 50, fun = min)
# Combine gap4 and rsf3, return only where they're both 1
winter <- overlay(gap4, rsf3, fun = min)
# Set working directory
setwd("C:/Users/anna.moeller/Documents")
# Make a shape for unit 6/7
gmus <- readOGR("GIS Layers/IDFG Game Management Units", "GameManagementUnits")
# gmu67 <- gUnion(gmus[gmus$NAME == "6", ], gmus[gmus$NAME == "7", ])
gmu6 <- gmus[gmus$NAME == "6", ]
# Read in RSF, define projection, crop to gmu4
rsf <- raster("GIS Layers/Jon Horne/Elk Winter Range RSF.asc")
proj4string(rsf) <- CRS("+proj=tmerc +lat_0=42 +lon_0=-114 +k=0.9996 +x_0=2500000 +y_0=1200000 +ellps=GRS80 +datum=NAD83 +units=m +no_defs +towgs84=0,0,0")
rsf2 <- crop(rsf, extent(gmu6))
# Aggregate
rsf3 <- aggregate(rsf2, 50, fun = mean)
# Select grid cells where the mean RSF value is at least 0.4
rsf3[rsf3 >= 0.4] <- 1
rsf3[rsf3 < 0.4] <- 0
# Bring in GAP raster, crop to extent of rsf2
### I am using resample here which isn't the best ####
### I tried bilinear but nearest neighbor was way better on keeping the 0s
gap <- raster("GIS Layers/GAP.Idaho/gaplc_IDTM")
# tst1 <- resample(gap, rsf2, method = "ngb")
# saveRDS(tst1, file = "Camera Trap Study/GRTS/gap_output_gmu67.RData")
gap2 <- readRDS("Camera Trap Study/GRTS/gap_output_gmu6.RData")
# Get the values for human developed and agricultural areas
develop_vals <- gap@data@attributes[[1]]$VALUE_1[grepl("develop", gap@data@attributes[[1]]$NVC_CLASS, ignore.case = T)]
water_vals <- gap@data@attributes[[1]]$VALUE_1[grepl("open water", gap@data@attributes[[1]]$NVC_CLASS, ignore.case = T)]
quarry_vals <- gap@data@attributes[[1]]$VALUE_1[grepl("quarries", gap@data@attributes[[1]]$NVC_CLASS, ignore.case = T)]
bad_vals <- c(as.character(develop_vals), as.character(quarry_vals))
gap3 <- gap2
gap3[gap3 %in% bad_vals] <- 0
gap3[gap3 != 0] <- 1
gap4 <- aggregate(gap3, 50, fun = min)
# Combine gap4 and rsf3, if the gap3 is 0, return 0, otherwise return rsf value
winter <- overlay(gap4, rsf3, fun = min)
# Clip this to Unit 6
winter6 <- mask(winter, gmu6)
# Bring in St. Joe Polygon
stjoe <- readOGR("GIS Layers/Jon Horne", "StJoe_Poly_Projected_Take2")
# Pick out the one big polygon
stjoe <- stjoe[1, ]
# Mask winter6 to the St. Joe polygon
win2 <- mask(winter6, stjoe)
plot(stjoe)
plot(win2, add = T)
plot(stjoe, add = T)
bad_vals <- c( as.character(quarry_vals))
gap3 <- gap2
gap3[gap3 %in% bad_vals] <- 0
gap3[gap3 != 0] <- 1
# Aggregate gap
gap4 <- aggregate(gap3, 50, fun = min)
# Combine gap4 and rsf3, if the gap3 is 0, return 0, otherwise return rsf value
winter <- overlay(gap4, rsf3, fun = min)
# Clip this to Unit 6
winter6 <- mask(winter, gmu6)
# Bring in St. Joe Polygon
stjoe <- readOGR("GIS Layers/Jon Horne", "StJoe_Poly_Projected_Take2")
# Pick out the one big polygon
stjoe <- stjoe[1, ]
# Mask winter6 to the St. Joe polygon
win2 <- mask(winter6, stjoe)
plot(stjoe)
plot(win2)
plot(stjoe)
plot(win2, add =T)
plot(stjoe, add =T)
bad_vals <- c( as.character(quarry_vals), as.character(water_vals))
gap3 <- gap2
gap3[gap3 %in% bad_vals] <- 0
gap3[gap3 != 0] <- 1
# Aggregate gap
gap4 <- aggregate(gap3, 50, fun = min)
winter <- overlay(gap4, rsf3, fun = min)
# Clip this to Unit 6
winter6 <- mask(winter, gmu6)
# Bring in St. Joe Polygon
stjoe <- readOGR("GIS Layers/Jon Horne", "StJoe_Poly_Projected_Take2")
# Pick out the one big polygon
stjoe <- stjoe[1, ]
# Mask winter6 to the St. Joe polygon
win2 <- mask(winter6, stjoe)
plot(stjoe)
plot(win2, add = T)
plot(stjoe, add = T)
gap3 <- gap2
gap4 <- aggregate(gap3, 50, fun = min)
# Combine gap4 and rsf3, if the gap3 is 0, return 0, otherwise return rsf value
winter <- overlay(gap4, rsf3, fun = min)
# Clip this to Unit 6
winter6 <- mask(winter, gmu6)
# Bring in St. Joe Polygon
stjoe <- readOGR("GIS Layers/Jon Horne", "StJoe_Poly_Projected_Take2")
# Pick out the one big polygon
stjoe <- stjoe[1, ]
# Mask winter6 to the St. Joe polygon
win2 <- mask(winter6, stjoe)
plot(win2)
plot(stjoe, add = T)
bad_vals <- c( as.character(quarry_vals))
gap3 <- gap2
gap3[gap3 %in% bad_vals] <- 0
gap3[gap3 != 0] <- 1
# Aggregate gap
gap4 <- aggregate(gap3, 50, fun = min)
# Combine gap4 and rsf3, if the gap3 is 0, return 0, otherwise return rsf value
winter <- overlay(gap4, rsf3, fun = min)
# Clip this to Unit 6
winter6 <- mask(winter, gmu6)
# Bring in St. Joe Polygon
stjoe <- readOGR("GIS Layers/Jon Horne", "StJoe_Poly_Projected_Take2")
# Pick out the one big polygon
stjoe <- stjoe[1, ]
# Mask winter6 to the St. Joe polygon
win2 <- mask(winter6, stjoe)
plot(win2)
bad_vals <- c( as.character(quarry_vals))
# Make GAP a raster of good and bad sampling areas
gap3 <- gap2
gap3[gap3 %in% bad_vals] <- 0
gap3[gap3 != 0] <- 1
# Aggregate gap
gap4 <- aggregate(gap3, 50, fun = min)
# Combine gap4 and rsf3, if the gap3 is 0, return 0, otherwise return rsf value
winter <- overlay(gap4, rsf3, fun = min)
# Clip this to Unit 6
winter6 <- mask(winter, gmu6)
# Bring in St. Joe Polygon
stjoe <- readOGR("GIS Layers/Jon Horne", "StJoe_Poly_Projected_Take2")
# Pick out the one big polygon
stjoe <- stjoe[1, ]
# Mask winter6 to the St. Joe polygon
win2 <- mask(winter6, stjoe)
# Make raster into spatial polygons, give each cell a unique ID
winterpoly <- rasterToPolygons(win2, fun = function(x){x == 1})
winterpoly$ID <- seq(1:dim(winterpoly)[1])
design <- list(None = list(panel = c(Panel = 10), seltype = "Equal", over = 10))
sites <- grts(design = design,
DesignID = "EQUAL",
type.frame = "area",
src.frame = "sp.object",
sp.object = winterpoly,
shapefile = F)
# Pick out the grid cells that were selected
sampsites <- winterpoly[winterpoly$ID %in% sites$ID, ]
# Add attributes to sampsites@data
sampsites$panel <- sapply(sampsites$ID, function(x){sites$panel[sites$ID == x]})
sampsites$siteID <- sapply(sampsites$ID, function(x){sites$siteID[sites$ID == x]})
sampsites$order <- substr(sampsites$siteID, 7, 8)
# Plot the selected sites
plot(winterpoly)
color <- rep("xx", nrow(sampsites@data))
color[sampsites@data$panel == "Panel"] <- "yellow"
color[sampsites@data$panel == "OverSamp"] <- "light blue"
plot(sampsites, add = T, col = color)
# Create 500m grid, then make it into polygons
thirds <- disaggregate(win2, fact = 3)
thirdspoly <- rasterToPolygons(thirds, fun = function(x){x == 1})
design <- list(None = list(panel = c(Panel = 10), seltype = "Equal", over = 10))
sites <- grts(design = design,
DesignID = "EQUAL",
type.frame = "area",
src.frame = "sp.object",
sp.object = winterpoly,
shapefile = F)
sampsites <- winterpoly[winterpoly$ID %in% sites$ID, ]
# Add attributes to sampsites@data
sampsites$panel <- sapply(sampsites$ID, function(x){sites$panel[sites$ID == x]})
sampsites$siteID <- sapply(sampsites$ID, function(x){sites$siteID[sites$ID == x]})
sampsites$order <- substr(sampsites$siteID, 7, 8)
# Plot the selected sites
plot(winterpoly)
color <- rep("xx", nrow(sampsites@data))
color[sampsites@data$panel == "Panel"] <- "yellow"
color[sampsites@data$panel == "OverSamp"] <- "light blue"
plot(sampsites, add = T, col = color)
# Create 500m grid, then make it into polygons
thirds <- disaggregate(win2, fact = 3)
thirdspoly <- rasterToPolygons(thirds, fun = function(x){x == 1})
# Subset 500m grid to the sampled sites
sampthirds <- gIntersection(thirdspoly, sampsites, byid=TRUE)
# returns a SpatialCollections, subset to the SpatialPolygons
sampthirds <- sampthirds@polyobj
# Make 500m grid SpatialPolygons into SpatialPolygonsDataFrame for writeOGR function
df <- data.frame("attr" = rep(NA, length(sampthirds)))
sampthirds <- SpatialPolygonsDataFrame(sampthirds, data.frame(df), match.ID = F)
# Write shapefiles
writeOGR(winterpoly, "Camera Trap Study/GRTS", "stjoe sampling area2", driver = "ESRI Shapefile")
writeOGR(sampsites, "Camera Trap Study/GRTS", "stjoe selected sites2", driver = "ESRI Shapefile")
writeOGR(sampthirds, "Camera Trap Study/GRTS", "stjoe thirds2", driver = "ESRI Shapefile")
load("simulation.RData")
# Load packages
library(vcd)
library(MASS)
# Set working directory
setwd("C:/Users/anna.moeller/Documents/School/Research Design/R")
load("simulation.RData")
final
plot(x = n, y = final[[which(k == 2)]],  xlab = "sample size",
ylab = "Probability of Rejecting H0",
main = "Probability of Rejecting the Exponential Distribution")
points(x = n, y = final[[which(k == 3)]], col = "red")
points(x = n, y = final[[which(k == 5)]], col = "orange")
points(x = n, y = final[[which(k == 7)]], col = "green")
points(x = n, y = smooth(final[[which(k == 9)]]), col = "blue")
legend(x = "topright", legend = c("k = 2", "k = 3", "k = 5", "k = 7", "k = 9"),
col = c("black", "red", "orange", "green", "blue"), pch = 1)
plot(x = n, y = final[[which(k == 2)]],  xlab = "sample size",
ylab = "Probability of Rejecting H0",
main = "Probability of Rejecting the Exponential Distribution")
# Select Weibull shape values, sample sizes, reps in each n in each k
k <- seq(1, 10, by = 0.5)
n <- 1:50
reps <- 1000
plot(x = n, y = final[[which(k == 2)]],  xlab = "sample size",
ylab = "Probability of Rejecting H0",
main = "Probability of Rejecting the Exponential Distribution")
points(x = n, y = final[[which(k == 3)]], col = "red")
points(x = n, y = final[[which(k == 5)]], col = "orange")
points(x = n, y = final[[which(k == 7)]], col = "green")
points(x = n, y = smooth(final[[which(k == 9)]]), col = "blue")
legend(x = "topright", legend = c("k = 2", "k = 3", "k = 5", "k = 7", "k = 9"),
col = c("black", "red", "orange", "green", "blue"), pch = 1)
?par
plot(x = n, y = final[[which(k == 3)]], col = "red", add = T, lty = 1)
points(x = n, y = final[[which(k == 3)]], col = "red", lty = 1)
?points
plot(x = n, y = final[[which(k == 3)]], col = "red", add = T, type = "l")
